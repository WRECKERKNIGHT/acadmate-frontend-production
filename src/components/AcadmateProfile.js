import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import toast from 'react-hot-toast';
const AcadmateProfile = ({ onClose }) => {
    const { user } = useAuth();
    const [activeTab, setActiveTab] = useState('profile');
    const [editing, setEditing] = useState(false);
    const [loading, setLoading] = useState(false);
    const [profileData, setProfileData] = useState({
        uid: user?.uid || '',
        fullName: user?.fullName || '',
        email: user?.email || '',
        phone: '',
        role: user?.role || 'STUDENT',
        dateOfBirth: '',
        gender: 'MALE',
        address: '',
        city: '',
        state: '',
        pincode: '',
        emergencyContact: '',
        institution: 'Acadmate Institute',
        qualification: '',
        avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(user?.fullName || 'User')}&background=667eea&color=fff&size=200`,
        bio: '',
        languages: ['English'],
        skills: [],
        achievements: [],
        theme: 'AUTO',
        notifications: {
            email: true,
            push: true,
            sms: false,
            testReminders: true,
            resultUpdates: true,
            announcements: true
        },
        profileVisibility: 'INSTITUTION_ONLY',
        showEmail: false,
        showPhone: false,
        allowMessages: true,
        testsCreated: 0,
        testsTaken: 0,
        averageScore: 0,
        totalPoints: 0,
        rank: 0,
        joinedDate: '2025-01-01',
        lastActive: new Date().toISOString()
    });
    const [passwordData, setPasswordData] = useState({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
    });
    const tabs = [
        { key: 'profile', label: 'Profile', icon: '👤', description: 'Personal information and bio' },
        { key: 'settings', label: 'Settings', icon: '⚙️', description: 'Preferences and privacy' },
        { key: 'activity', label: 'Activity', icon: '📊', description: 'Your stats and progress' },
        { key: 'security', label: 'Security', icon: '🔒', description: 'Password and security settings' }
    ];
    const subjects = ['Mathematics', 'Physics', 'Chemistry', 'Biology', 'English', 'History', 'Geography', 'Computer Science'];
    const skillOptions = ['Problem Solving', 'Critical Thinking', 'Communication', 'Leadership', 'Time Management', 'Research', 'Programming', 'Design'];
    const languageOptions = ['English', 'Hindi', 'Spanish', 'French', 'German', 'Chinese', 'Arabic', 'Japanese'];
    const handleSaveProfile = async () => {
        setLoading(true);
        try {
            // API call to save profile would go here
            await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
            toast.success('Profile updated successfully!');
            setEditing(false);
        }
        catch (error) {
            toast.error('Failed to update profile');
        }
        finally {
            setLoading(false);
        }
    };
    const handlePasswordChange = async () => {
        if (passwordData.newPassword !== passwordData.confirmPassword) {
            toast.error('New passwords do not match');
            return;
        }
        if (passwordData.newPassword.length < 8) {
            toast.error('Password must be at least 8 characters long');
            return;
        }
        setLoading(true);
        try {
            // API call to change password would go here
            await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
            toast.success('Password changed successfully!');
            setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' });
        }
        catch (error) {
            toast.error('Failed to change password');
        }
        finally {
            setLoading(false);
        }
    };
    const renderProfileTab = () => (_jsxs("div", { className: "space-y-8", children: [_jsx("div", { className: "bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl p-8 text-white", children: _jsxs("div", { className: "flex items-center space-x-6", children: [_jsxs("div", { className: "relative", children: [_jsx("img", { src: profileData.avatar, alt: "Profile", className: "w-24 h-24 rounded-full border-4 border-white shadow-lg" }), editing && (_jsx("button", { className: "absolute bottom-0 right-0 bg-white text-blue-600 p-2 rounded-full shadow-lg", children: "\uD83D\uDCF7" }))] }), _jsxs("div", { className: "flex-1", children: [_jsx("h1", { className: "text-3xl font-bold mb-2", children: profileData.fullName }), _jsx("p", { className: "text-blue-100 mb-2", children: profileData.role.replace('_', ' ').toLowerCase().replace(/\b\w/g, l => l.toUpperCase()) }), _jsx("p", { className: "text-blue-200 text-sm", children: profileData.institution })] }), _jsx("div", { className: "text-right", children: _jsx("button", { onClick: () => setEditing(!editing), className: "bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-all", children: editing ? '❌ Cancel' : '✏️ Edit Profile' }) })] }) }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6", children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 mb-6", children: "Basic Information" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Full Name" }), _jsx("input", { type: "text", value: profileData.fullName, onChange: (e) => setProfileData({ ...profileData, fullName: e.target.value }), disabled: !editing, className: `w-full px-4 py-2 rounded-lg border ${editing
                                            ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            : 'border-gray-200 bg-gray-50'}` })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Email" }), _jsx("input", { type: "email", value: profileData.email, onChange: (e) => setProfileData({ ...profileData, email: e.target.value }), disabled: !editing, className: `w-full px-4 py-2 rounded-lg border ${editing
                                            ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            : 'border-gray-200 bg-gray-50'}` })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Phone" }), _jsx("input", { type: "tel", value: profileData.phone, onChange: (e) => setProfileData({ ...profileData, phone: e.target.value }), disabled: !editing, className: `w-full px-4 py-2 rounded-lg border ${editing
                                            ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            : 'border-gray-200 bg-gray-50'}` })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Date of Birth" }), _jsx("input", { type: "date", value: profileData.dateOfBirth, onChange: (e) => setProfileData({ ...profileData, dateOfBirth: e.target.value }), disabled: !editing, className: `w-full px-4 py-2 rounded-lg border ${editing
                                            ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            : 'border-gray-200 bg-gray-50'}` })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Gender" }), _jsxs("select", { value: profileData.gender, onChange: (e) => setProfileData({ ...profileData, gender: e.target.value }), disabled: !editing, className: `w-full px-4 py-2 rounded-lg border ${editing
                                            ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            : 'border-gray-200 bg-gray-50'}`, children: [_jsx("option", { value: "MALE", children: "Male" }), _jsx("option", { value: "FEMALE", children: "Female" }), _jsx("option", { value: "OTHER", children: "Other" })] })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Emergency Contact" }), _jsx("input", { type: "tel", value: profileData.emergencyContact, onChange: (e) => setProfileData({ ...profileData, emergencyContact: e.target.value }), disabled: !editing, className: `w-full px-4 py-2 rounded-lg border ${editing
                                            ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            : 'border-gray-200 bg-gray-50'}` })] })] }), _jsxs("div", { className: "mt-8", children: [_jsx("h3", { className: "text-lg font-semibold text-gray-900 mb-4", children: "Address Information" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: [_jsxs("div", { className: "md:col-span-2 lg:col-span-3", children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Street Address" }), _jsx("textarea", { value: profileData.address, onChange: (e) => setProfileData({ ...profileData, address: e.target.value }), disabled: !editing, rows: 2, className: `w-full px-4 py-2 rounded-lg border ${editing
                                                    ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                                    : 'border-gray-200 bg-gray-50'}` })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "City" }), _jsx("input", { type: "text", value: profileData.city, onChange: (e) => setProfileData({ ...profileData, city: e.target.value }), disabled: !editing, className: `w-full px-4 py-2 rounded-lg border ${editing
                                                    ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                                    : 'border-gray-200 bg-gray-50'}` })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "State" }), _jsx("input", { type: "text", value: profileData.state, onChange: (e) => setProfileData({ ...profileData, state: e.target.value }), disabled: !editing, className: `w-full px-4 py-2 rounded-lg border ${editing
                                                    ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                                    : 'border-gray-200 bg-gray-50'}` })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "PIN Code" }), _jsx("input", { type: "text", value: profileData.pincode, onChange: (e) => setProfileData({ ...profileData, pincode: e.target.value }), disabled: !editing, className: `w-full px-4 py-2 rounded-lg border ${editing
                                                    ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                                    : 'border-gray-200 bg-gray-50'}` })] })] })] })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6", children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 mb-6", children: profileData.role === 'STUDENT' ? 'Academic Information' : 'Professional Information' }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Institution" }), _jsx("input", { type: "text", value: profileData.institution, onChange: (e) => setProfileData({ ...profileData, institution: e.target.value }), disabled: !editing, className: `w-full px-4 py-2 rounded-lg border ${editing
                                            ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            : 'border-gray-200 bg-gray-50'}` })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Qualification" }), _jsx("input", { type: "text", value: profileData.qualification, onChange: (e) => setProfileData({ ...profileData, qualification: e.target.value }), disabled: !editing, placeholder: "e.g., M.Sc. Mathematics, B.Tech CSE, Class 12", className: `w-full px-4 py-2 rounded-lg border ${editing
                                            ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            : 'border-gray-200 bg-gray-50'}` })] }), profileData.role === 'STUDENT' && (_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Class" }), _jsxs("select", { value: profileData.class || '', onChange: (e) => setProfileData({ ...profileData, class: e.target.value }), disabled: !editing, className: `w-full px-4 py-2 rounded-lg border ${editing
                                            ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            : 'border-gray-200 bg-gray-50'}`, children: [_jsx("option", { value: "", children: "Select Class" }), [7, 8, 9, 10, 11, 12].map(cls => (_jsxs("option", { value: cls, children: ["Class ", cls] }, cls)))] })] })), profileData.role !== 'STUDENT' && (_jsxs(_Fragment, { children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Experience (Years)" }), _jsx("input", { type: "number", value: profileData.experience || '', onChange: (e) => setProfileData({ ...profileData, experience: parseInt(e.target.value) }), disabled: !editing, min: "0", max: "50", className: `w-full px-4 py-2 rounded-lg border ${editing
                                                    ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                                    : 'border-gray-200 bg-gray-50'}` })] }), _jsxs("div", { className: "md:col-span-2", children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Subjects (For Teachers)" }), _jsx("div", { className: "flex flex-wrap gap-2", children: subjects.map(subject => (_jsxs("label", { className: "flex items-center", children: [_jsx("input", { type: "checkbox", checked: profileData.subjects?.includes(subject) || false, onChange: (e) => {
                                                                const currentSubjects = profileData.subjects || [];
                                                                if (e.target.checked) {
                                                                    setProfileData({ ...profileData, subjects: [...currentSubjects, subject] });
                                                                }
                                                                else {
                                                                    setProfileData({ ...profileData, subjects: currentSubjects.filter(s => s !== subject) });
                                                                }
                                                            }, disabled: !editing, className: "w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" }), _jsx("span", { className: "ml-2 text-sm text-gray-700", children: subject })] }, subject))) })] })] }))] })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6", children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 mb-6", children: "About Me" }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Bio" }), _jsx("textarea", { value: profileData.bio, onChange: (e) => setProfileData({ ...profileData, bio: e.target.value }), disabled: !editing, rows: 4, placeholder: "Tell us about yourself, your interests, goals, and aspirations...", className: `w-full px-4 py-2 rounded-lg border ${editing
                                            ? 'border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            : 'border-gray-200 bg-gray-50'}` })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Languages" }), _jsx("div", { className: "flex flex-wrap gap-2", children: languageOptions.map(language => (_jsxs("label", { className: "flex items-center", children: [_jsx("input", { type: "checkbox", checked: profileData.languages.includes(language), onChange: (e) => {
                                                        if (e.target.checked) {
                                                            setProfileData({ ...profileData, languages: [...profileData.languages, language] });
                                                        }
                                                        else {
                                                            setProfileData({ ...profileData, languages: profileData.languages.filter(l => l !== language) });
                                                        }
                                                    }, disabled: !editing, className: "w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" }), _jsx("span", { className: "ml-2 text-sm text-gray-700", children: language })] }, language))) })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Skills & Interests" }), _jsx("div", { className: "flex flex-wrap gap-2", children: skillOptions.map(skill => (_jsxs("label", { className: "flex items-center", children: [_jsx("input", { type: "checkbox", checked: profileData.skills.includes(skill), onChange: (e) => {
                                                        if (e.target.checked) {
                                                            setProfileData({ ...profileData, skills: [...profileData.skills, skill] });
                                                        }
                                                        else {
                                                            setProfileData({ ...profileData, skills: profileData.skills.filter(s => s !== skill) });
                                                        }
                                                    }, disabled: !editing, className: "w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" }), _jsx("span", { className: "ml-2 text-sm text-gray-700", children: skill })] }, skill))) })] })] })] }), editing && (_jsx("div", { className: "text-center", children: _jsx("button", { onClick: handleSaveProfile, disabled: loading, className: "px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold disabled:opacity-50", children: loading ? '💾 Saving...' : '💾 Save Profile' }) }))] }));
    const renderSettingsTab = () => (_jsxs("div", { className: "space-y-8", children: [_jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6", children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 mb-6", children: "Notification Preferences" }), _jsx("div", { className: "space-y-4", children: [
                            { key: 'email', label: 'Email Notifications', description: 'Receive updates via email' },
                            { key: 'push', label: 'Push Notifications', description: 'Browser push notifications' },
                            { key: 'sms', label: 'SMS Notifications', description: 'Text message alerts' },
                            { key: 'testReminders', label: 'Test Reminders', description: 'Reminders about upcoming tests' },
                            { key: 'resultUpdates', label: 'Result Updates', description: 'Notifications when results are available' },
                            { key: 'announcements', label: 'Announcements', description: 'Important updates from institution' }
                        ].map((setting) => (_jsxs("div", { className: "flex items-center justify-between p-4 bg-gray-50 rounded-lg", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium text-gray-900", children: setting.label }), _jsx("p", { className: "text-sm text-gray-600", children: setting.description })] }), _jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [_jsx("input", { type: "checkbox", checked: profileData.notifications[setting.key], onChange: (e) => setProfileData({
                                                ...profileData,
                                                notifications: {
                                                    ...profileData.notifications,
                                                    [setting.key]: e.target.checked
                                                }
                                            }), className: "sr-only peer" }), _jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600" })] })] }, setting.key))) })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6", children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 mb-6", children: "Privacy Settings" }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Profile Visibility" }), _jsxs("select", { value: profileData.profileVisibility, onChange: (e) => setProfileData({ ...profileData, profileVisibility: e.target.value }), className: "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", children: [_jsx("option", { value: "PUBLIC", children: "Public - Anyone can see your profile" }), _jsx("option", { value: "INSTITUTION_ONLY", children: "Institution Only - Only people in your institution" }), _jsx("option", { value: "PRIVATE", children: "Private - Only you can see your profile" })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium text-gray-900", children: "Show Email Address" }), _jsx("p", { className: "text-sm text-gray-600", children: "Allow others to see your email" })] }), _jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [_jsx("input", { type: "checkbox", checked: profileData.showEmail, onChange: (e) => setProfileData({ ...profileData, showEmail: e.target.checked }), className: "sr-only peer" }), _jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600" })] })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium text-gray-900", children: "Show Phone Number" }), _jsx("p", { className: "text-sm text-gray-600", children: "Allow others to see your phone number" })] }), _jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [_jsx("input", { type: "checkbox", checked: profileData.showPhone, onChange: (e) => setProfileData({ ...profileData, showPhone: e.target.checked }), className: "sr-only peer" }), _jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600" })] })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium text-gray-900", children: "Allow Messages" }), _jsx("p", { className: "text-sm text-gray-600", children: "Allow others to send you messages" })] }), _jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [_jsx("input", { type: "checkbox", checked: profileData.allowMessages, onChange: (e) => setProfileData({ ...profileData, allowMessages: e.target.checked }), className: "sr-only peer" }), _jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600" })] })] })] })] })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6", children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 mb-6", children: "Appearance" }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Theme" }), _jsxs("select", { value: profileData.theme, onChange: (e) => setProfileData({ ...profileData, theme: e.target.value }), className: "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", children: [_jsx("option", { value: "LIGHT", children: "Light Mode" }), _jsx("option", { value: "DARK", children: "Dark Mode" }), _jsx("option", { value: "AUTO", children: "Auto (System Preference)" })] })] })] })] }));
    const renderActivityTab = () => (_jsxs("div", { className: "space-y-8", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6", children: [_jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6 text-center", children: [_jsx("div", { className: "text-3xl font-bold text-blue-600 mb-2", children: profileData.testsCreated || 0 }), _jsx("div", { className: "text-sm text-gray-600", children: "Tests Created" })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6 text-center", children: [_jsx("div", { className: "text-3xl font-bold text-green-600 mb-2", children: profileData.testsTaken || 0 }), _jsx("div", { className: "text-sm text-gray-600", children: "Tests Taken" })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6 text-center", children: [_jsxs("div", { className: "text-3xl font-bold text-purple-600 mb-2", children: [profileData.averageScore || 0, "%"] }), _jsx("div", { className: "text-sm text-gray-600", children: "Average Score" })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6 text-center", children: [_jsxs("div", { className: "text-3xl font-bold text-orange-600 mb-2", children: ["#", profileData.rank || 'N/A'] }), _jsx("div", { className: "text-sm text-gray-600", children: "Class Rank" })] })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6", children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 mb-6", children: "Achievements & Badges" }), profileData.achievements.length === 0 ? (_jsxs("div", { className: "text-center py-8 text-gray-500", children: [_jsx("div", { className: "text-4xl mb-4", children: "\uD83C\uDFC6" }), _jsx("p", { children: "No achievements yet. Keep participating in tests to earn badges!" })] })) : (_jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: profileData.achievements.map((achievement, index) => (_jsx("div", { className: "p-4 bg-yellow-50 border border-yellow-200 rounded-lg", children: _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "text-2xl mb-2", children: "\uD83C\uDFC6" }), _jsx("div", { className: "font-medium text-gray-900", children: achievement })] }) }, index))) }))] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6", children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 mb-6", children: "Recent Activity" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center space-x-4 p-4 bg-gray-50 rounded-lg", children: [_jsx("div", { className: "w-10 h-10 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center", children: "\uD83D\uDCDD" }), _jsxs("div", { className: "flex-1", children: [_jsx("p", { className: "font-medium text-gray-900", children: "Joined Acadmate" }), _jsx("p", { className: "text-sm text-gray-600", children: new Date(profileData.joinedDate).toLocaleDateString() })] })] }), _jsxs("div", { className: "flex items-center space-x-4 p-4 bg-gray-50 rounded-lg", children: [_jsx("div", { className: "w-10 h-10 bg-green-100 text-green-600 rounded-full flex items-center justify-center", children: "\u23F0" }), _jsxs("div", { className: "flex-1", children: [_jsx("p", { className: "font-medium text-gray-900", children: "Last Active" }), _jsx("p", { className: "text-sm text-gray-600", children: new Date(profileData.lastActive).toLocaleString() })] })] })] })] })] }));
    const renderSecurityTab = () => (_jsxs("div", { className: "space-y-8", children: [_jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6", children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 mb-6", children: "Change Password" }), _jsxs("div", { className: "space-y-4 max-w-md", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Current Password" }), _jsx("input", { type: "password", value: passwordData.currentPassword, onChange: (e) => setPasswordData({ ...passwordData, currentPassword: e.target.value }), className: "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "New Password" }), _jsx("input", { type: "password", value: passwordData.newPassword, onChange: (e) => setPasswordData({ ...passwordData, newPassword: e.target.value }), className: "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Confirm New Password" }), _jsx("input", { type: "password", value: passwordData.confirmPassword, onChange: (e) => setPasswordData({ ...passwordData, confirmPassword: e.target.value }), className: "w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" })] }), _jsx("button", { onClick: handlePasswordChange, disabled: loading, className: "w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium disabled:opacity-50", children: loading ? 'Changing Password...' : 'Change Password' })] })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6", children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 mb-6", children: "Two-Factor Authentication" }), _jsxs("div", { className: "flex items-center justify-between p-4 bg-gray-50 rounded-lg", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium text-gray-900", children: "SMS Authentication" }), _jsx("p", { className: "text-sm text-gray-600", children: "Add an extra layer of security with SMS" })] }), _jsx("button", { className: "px-4 py-2 text-blue-600 border border-blue-600 rounded-lg hover:bg-blue-50", children: "Enable" })] })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border p-6", children: [_jsx("h2", { className: "text-xl font-bold text-gray-900 mb-6", children: "Active Sessions" }), _jsx("div", { className: "space-y-4", children: _jsxs("div", { className: "flex items-center justify-between p-4 border border-gray-200 rounded-lg", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "w-10 h-10 bg-green-100 text-green-600 rounded-full flex items-center justify-center", children: "\uD83D\uDCBB" }), _jsxs("div", { children: [_jsx("p", { className: "font-medium text-gray-900", children: "Current Session" }), _jsxs("p", { className: "text-sm text-gray-600", children: ["Windows \u2022 Chrome \u2022 ", new Date().toLocaleString()] })] })] }), _jsx("span", { className: "text-sm text-green-600 font-medium", children: "Active" })] }) })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border border-red-200 p-6", children: [_jsx("h2", { className: "text-xl font-bold text-red-600 mb-6", children: "Danger Zone" }), _jsxs("div", { className: "bg-red-50 p-4 rounded-lg", children: [_jsx("h3", { className: "font-medium text-red-800 mb-2", children: "Delete Account" }), _jsx("p", { className: "text-sm text-red-700 mb-4", children: "Once you delete your account, there is no going back. Please be certain." }), _jsx("button", { className: "px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium", children: "Delete Account" })] })] })] }));
    return (_jsx("div", { className: "min-h-screen bg-gray-50", children: _jsxs("div", { className: "max-w-6xl mx-auto px-4 py-8", children: [_jsxs("div", { className: "text-center mb-8", children: [_jsx("h1", { className: "text-4xl font-bold text-gray-900 mb-2", children: "My Profile" }), _jsx("p", { className: "text-gray-600", children: "Manage your account settings and preferences" })] }), _jsxs("div", { className: "bg-white rounded-xl shadow-sm border mb-8", children: [_jsx("div", { className: "border-b border-gray-200", children: _jsx("nav", { className: "flex space-x-8 px-6", children: tabs.map((tab) => (_jsxs("button", { onClick: () => setActiveTab(tab.key), className: `py-4 px-2 border-b-2 font-medium text-sm transition-colors ${activeTab === tab.key
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}`, children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("span", { children: tab.icon }), _jsx("span", { children: tab.label })] }), _jsx("div", { className: "text-xs text-gray-400 mt-1", children: tab.description })] }, tab.key))) }) }), _jsxs("div", { className: "p-6", children: [activeTab === 'profile' && renderProfileTab(), activeTab === 'settings' && renderSettingsTab(), activeTab === 'activity' && renderActivityTab(), activeTab === 'security' && renderSecurityTab()] })] })] }) }));
};
export default AcadmateProfile;
